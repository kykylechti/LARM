#!/usr/bin/python3
import rclpy
import math, random, tf2_ros, numpy as np
from rclpy.node import Node
from geometry_msgs.msg import Vector3
import tf2_geometry_msgs 

class Finder(Node):
    def __init__(self, rosNode ):
        # Get logger from the node:
        self._logger= rosNode.get_logger()
        
        # Transform tool:
        #self.tf_buffer = tf2_ros.Buffer()
        #self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        # Publisher / Listener
        self.goal_listener = rosNode.create_subscription(Vector3, '/position', self.goal_callback, 10)
        self.pose_publisher= rosNode.create_publisher(tf2_geometry_msgs.Pose, '/pose', 10)


        # Node Attribute:
        self.reference_frame='odom'
        self.local_frame= 'base_link'
        self.global_goal= tf2_geometry_msgs.Pose()
        self.global_goal.position.x= (float)(1)
        self.global_goal.position.y= (float)(1)

        rosNode.create_timer(0.1, self.publish_goal)
        
    def goal_callback(self, msg): 
        self.global_goal.position.x= (float)(self.msg.x)
        self.global_goal.position.y= (float)(self.msg.z)


    def publish_goal(self):
        pass
        '''
        self._node = Finder()
        localGoal = Pose()
        self._node.goal_callback()
        currentTime= rclpy.time.Time()
        # Get Transformation
        try:
            stampedTransform= self.tf_buffer.lookup_transform(self.local_frame, self.reference_frame, currentTime)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):

            self._node.get_logger().info( f'Could not transform the goal into {self.local_frame}: {tex}')
            return

        # Local goal à positionner dans la map
        localGoal = tf2_geometry_msgs.do_transform_pose( self.global_goal, stampedTransform )

        self.pose_publisher.publish(localGoal)'''

def main():

    # Initialisation du noeud
    rclpy.init()
    node = Node( "mv_control" )

    # Appel du contrôle
    local= Finder(node)

    # Infinite Loop:
    rclpy.spin( node )

    # Fin du programme
    node.destroy_node()
    rclpy.shutdown()

if __name__=='__main__':
	main()