#!/usr/bin/python3
import rclpy
import math, random, tf2_ros, numpy as np
from rclpy.node import Node
from geometry_msgs.msg import Vector3, PoseWithCovariance, PoseStamped, Pose
import tf2_geometry_msgs 
from tf2_ros.buffer import Buffer
from visualization_msgs.msg import MarkerArray, Marker
from std_msgs.msg import ColorRGBA, String
from interfaces_robot.msg import StringVect


x_mobil = 0.0
y_mobil = 0.0
id_marker=0
isOk= True

def signalInteruption(signum, frame):
    global isOk
    print( "\nCtrl-c pressed" )
    isOk= False

class Finder(Node):
    def __init__(self):
        self._i = 0

    def initializeFinderNode(self, rosNode ):
        # Get logger from the node:
        self._logger= rosNode.get_logger()
        
        # Transform tool:
        self.tfbuffer = Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tfbuffer, rosNode)

        # Publisher / Listener
        self.goal_listener = rosNode.create_subscription(StringVect, '/position_objet', self.goal_callback, 10)
        self.pose_publisher= rosNode.create_publisher(Marker, '/visualization_marker_array', 10)



        # Node Attribute:
        self.reference_frame='map'
        self.local_frame= 'base_link'
        self.global_type=String()
        self.global_goal=Pose()
        self.global_goal.position.x= (float)(0.0)
        self.global_goal.position.y= (float)(0.0)


        self._timer = rosNode.create_timer(0.1, self.publish_goal)
        self._clock = rosNode.get_clock()
        self.positions = []
        
    # Récupération de la position de l'objet detecté
    def goal_callback(self, msg): 
        self.global_type=msg.message.data
        self.global_goal.position.x=msg.vect.x
        self.global_goal.position.y=msg.vect.y
        self.global_goal.position.z=msg.vect.z


    def publish_goal(self):
        global id_marker, distanceMinParam
        tmpPose = Pose()
        currentTime= rclpy.time.Time()
        # Transformation des coordonnées de l'objet de base_link vers map
        if(self.global_goal.position.x!=0 and self.global_goal.position.y!=0 ):
            try:
                stampedTransform= self.tfbuffer.lookup_transform(self.local_frame, self.reference_frame, currentTime)
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException): 
                self._logger.info( f'Could not transform the goal into {self.local_frame}: Exception')
                return

            marker_positions = [
            (self.global_goal.position.x, self.global_goal.position.y, self.global_goal.position.z),
            ]

            for idx, (x, y, z) in enumerate(marker_positions):
                tmpPose = tf2_geometry_msgs.do_transform_pose(self.global_goal, stampedTransform)

                localGoal = Marker()
                localGoal.header.frame_id = "map"  # Frame of reference (use 'map' or other valid frame)
                localGoal.header.stamp = self._clock.now().to_msg()
                localGoal.ns = "array_of_markers"
                localGoal.id = id_marker  # Unique ID for each marker in the array
                localGoal.type = Marker.SPHERE
                localGoal.action = Marker.ADD

                # Set the position of each marker
                localGoal.pose.position.x = tmpPose.position.x
                localGoal.pose.position.y = tmpPose.position.y
                localGoal.pose.orientation.w = 1.0

                # Set the scale of the marker (size)
                localGoal.scale.x = 0.5
                localGoal.scale.y = 0.5
                localGoal.scale.z = 0.5

                # Selection de la couleur à partir du type d'objet detecté
                if(self.global_type =="fantome") : 
                    localGoal.color = ColorRGBA(r=0.0, g=1.0, b=0.0, a=1.0)
                    typeObjet = 0.0
                else : 
                    localGoal.color = ColorRGBA(r=1.0, g=0.0, b=0.0, a=1.0)
                    typeObjet = 1.0


                # Calcul des distances par rapport aux points déjà placés
                distance = []
                if(id_marker!=0):
                    for i in range (0,id_marker): 
                        res = math.sqrt(math.pow((localGoal.pose.position.x-self.positions[i][0]), 2)+math.pow((localGoal.pose.position.y-self.positions[i][1]), 2))
                        distance.append(res)
                    minDist = min(distance)
                else: 
                    minDist = 10.0

                # Choix du placement selon le point le plus proche
                if(typeObjet == 0.0):
                    if(minDist<distanceMinParam and self.positions[distance.index(minDist)][2]==0.0):
                        place = False
                    elif(minDist<distanceMinParam and self.positions[distance.index(minDist)][2]==1.0):
                        # Remplacement des points rouges par des points verts dans le cas de deux points detectés au même endroit
                        place = True
                        localGoal.id = distance.index(minDist)
                        id_marker -= 1
                        np.delete(self.positions, distance.index(minDist))
                    else:
                        place = True
                else: 
                    if(minDist<distanceMinParam):
                        place = False
                    else: 
                        place = True
                    

                # Publish the marker
                if(place):
                    self.pose_publisher.publish(localGoal)
                    self._logger.info(f"distance : {minDist}, id : {localGoal.id}")
                    self.positions.append((localGoal.pose.position.x, localGoal.pose.position.y, typeObjet))
                    id_marker += 1

                # Remise à 0
                self.global_goal.position.x= (float)(0.0)
                self.global_goal.position.y= (float)(0.0)

            

def main():
    global distanceMinParam
    # Initialisation du noeud
    rclpy.init()
    node = Node( "place_fantome" )

    node.declare_parameter('distanceMinParam', 1.0)
    distanceMinParam = node.get_parameter('distanceMinParam').value

    # Appel du contrôle
    finderNode = Finder()
    finderNode.initializeFinderNode(node)

    # Infinite Loop:
    rclpy.spin( node )

    # Fin du programme
    node.destroy_node()
    rclpy.shutdown()

if __name__=='__main__':
	main()