#!/usr/bin/python3
import rclpy
import math
import random
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist, PoseWithCovariance, Pose
from std_msgs.msg import Bool, Int8
import tf2_geometry_msgs 
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
from collections import deque


obstacleDetec = "noScan"    # Détection des obstacles
memory = "no"               # Détection précédente différente de la détection actuelle
i = 0                       # Rotations aléatoires à effectuer
stop = False                # Arrêt d'urgence
speed = 0.0                 # Vitesse linéaire
rotSpeed = 0.0              # Vitesse de rotation
defaultSpeed = 0.7          # Vitesse par défaut 
defaultRotSpeed = 1.0       # Vitesse de rotation par défaut
memory='no'                 # Etat précédent de détection


def plus_court_chemin(grille, depart, arrivee):
    global pourcentage
    """
    Trouve le plus court chemin dans une grille en évitant les cases ayant une valeur > 80 ou égale à -1.
    
    :param grille: Liste de listes représentant la grille (entiers entre -1 et 100).
    :param depart: Tuple (x, y) des coordonnées de départ.
    :param arrivee: Tuple (x, y) des coordonnées d'arrivée.
    :return: Liste des coordonnées du chemin le plus court ou None si aucun chemin n'existe.
    """
    # Vérifier si le départ ou l'arrivée sont valides
    if grille[depart[0]][depart[1]] > pourcentage or grille[depart[0]][depart[1]] == -1:
        return None
    if grille[arrivee[0]][arrivee[1]] > pourcentage or grille[arrivee[0]][arrivee[1]] == -1:
        return None

    # Directions possibles : haut, bas, gauche, droite
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    # Initialisation de la file pour BFS
    file = deque([(depart, [depart])])  # (position_actuelle, chemin)
    visited = set()  # Ensemble des cases déjà visitées
    visited.add(depart)

    while file:
        position_actuelle, chemin = file.popleft()

        # Si on atteint l'arrivée, retourner le chemin
        if position_actuelle == arrivee:
            return chemin

        # Explorer les voisins
        for dx, dy in directions:
            voisin = (position_actuelle[0] + dx, position_actuelle[1] + dy)

            # Vérifier si le voisin est dans les limites et accessible
            if (0 <= voisin[0] < len(grille) and
                0 <= voisin[1] < len(grille[0]) and
                voisin not in visited and
                0 <= grille[voisin[0]][voisin[1]] <= pourcentage):  # Condition d'accessibilité
                
                file.append((voisin, chemin + [voisin]))
                visited.add(voisin)

    # Aucun chemin trouvé
    return None

# Fonction permettant de retourner une liste de points correspondant à des changements de direction
def pointsClesChemin(chemin, depart):
    pointPrec = depart
    dirPrec = (chemin[0]-pointPrec[0], chemin[1]-pointPrec[1])

    res = []
    for i in (chemin):
        dirAct = (i[0]-pointPrec[0], i[1]-pointPrec[1])
        if(dirAct != dirPrec):
            res.append(i)
            dirPrec = dirAct
        pointPrec = i
    return res


class SmartCtrl:
    def initializeRosNode(self, rosNode ):
        global topicVel
        # Get logger from the node:
        self._logger= rosNode.get_logger()

        # Initialize publisher:
        self._pubVelocity= rosNode.create_publisher(Twist, topicVel, 10)

        # Initialize scan callback:
        self._subToScan = rosNode.create_subscription(LaserScan, 'scan', self.scan_callback, 10)

        # Initialize control callback:
        self._timForCtrl= rosNode.create_timer(0.05, self.control_callback)

        # Arrêts d'urgence
        self._emergency = rosNode.create_subscription(Bool, '/emergency', self.emergency_callback, 10)
        
        # Récupérer la map
        self._mapSub = rosNode.create_subscription(OccupancyGrid, '/map', self.map_callback, 10)

        # Récupérer la position du robot
        self._positionSub = rosNode.create_subscription(PoseWithCovariance, '/pose', self.position_callback, 10)
    
        # Topic de publication de l'objectif de position

        self._map = Int8()

        self.reference_frame='map'
        self.local_frame= 'base_link'
        self.orient=[]

        self._robotPose = Pose()
        self._robotPose.position.x=0
        self._robotPose.position.y=0
        

    def scan_callback(self, scanMsg ):
        pass

    def emergency_callback(self, msg):
        global stop
        stop = msg.data

    def map_callback(self, msg):
        self._map_haut = msg.info.height
        self._map_larg = msg.info.width
        self._map = msg.data
            
    def position_callback(self, msg):
        self.orient= [msg.pose.orientation.z, msg.pose.orientation.w]
        try:
            stampedTransform= self.tfbuffer.lookup_transform(self.local_frame, self.reference_frame, currentTime)
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException): 
            self._logger.info( f'Could not transform the goal into {self.local_frame}: Exception')
            return

        self._robotPose = tf2_geometry_msgs.do_transform_pose(msg.pose, stampedTransform)

    def control_callback(self):

        depart = (int(self._robotPose.position.x), int(self._robotPose.position.y))
        grid = self._map

        for i in range (0, self._map_haut):
            for j in range (0, self._map_larg): 
                if(self._map[i][j]==-1): 
                    arrivee = (i, j)
                    chemin = plus_court_chemin(grid, depart, arrivee)
                    if (chemin != None):
                        i = self._map_haut + 1
                        j = self._map_larg + 1

        points = pointsClesChemin(chemin, depart)
        for p in points: 
            dirAct = (p[0]-depart[0], p[1]-depart[1])
            if (dirAct==(-1, 0)): #derriere
                orientV=[1.0, 0.0]
            elif (dirAct==(1, 0)): #devant
                orientV=[0.0, 1.0]
            elif (dirAct==(0, -1)): #gauche
                orientV=[0.5, 0.5]
            elif (dirAct==(0, 1)): #droite
                orientV=[-0.5, 0.5]
            while((self.orient[0]<orientV[0]-0.05 or self.orient[0]>orientV[0]+0.05) and (self.orient[1]<orientV[1]-0.05 or self.orient[1]>orientV[1]+0.05)):
                twist = Twist()
                twist.angular.z = -1.0
                self._pubVelocity.publish(twist)



def main():
    global topicVel, pourcentage
    # Initialisation du noeud
    rclpy.init()
    node = Node( "smart_control" )

    node.declare_parameter('topicVel', "cmd_vel")
    topicVel = node.get_parameter('topicVel').value

    node.declare_parameter('pourcentage', 30)
    pourcentage = node.get_parameter('pourcentage').value

    # Appel du contrôle
    smart= SmartCtrl()
    smart.initializeRosNode( node )

    # Infinite Loop:
    rclpy.spin( node )

    # Fin du programme
    node.destroy_node()
    rclpy.shutdown()

if __name__=='__main__':
	main()

