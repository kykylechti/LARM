#!/usr/bin/python3

import rclpy
import time 
from rclpy.node import Node
from geometry_msgs.msg import Twist
from kobuki_ros_interfaces.msg import BumperEvent
from sensor_msgs.msg import LaserScan

# def _20mvt():
#     rclpy.init()
#     aNode = Node("mouv20")
#     aPublisher = aNode.create_publisher(Twist, '/multi/cmd_nav', 10)
#     velocity = Twist()
#     velocity.linear.x = 0.5
#     velocity.angular.z = 1.0
#     for i in range(21): 
#         aPublisher.publish(velocity)
#         rclpy.spin_once(aNode, timeout_sec=0.5)
#     aNode.destroy_node()
#     rclpy.shutdown()

#Variables globales 
bumper_type = 0
bumper_state = 0
valeur_x = 0.0
valeur_z = 0.0
i=0

def squaredMov():
    rclpy.init()
    aNode = Node("sqrMov")

    talker = ROSTalker(aNode)
    listener = ROSListener(aNode)
    
    rclpy.spin(aNode)

    aNode.destroy_node()
    rclpy.shutdown()


class ROSTalker:
    def __init__(self, rosNode):
        self._publisher = rosNode.create_publisher(Twist, '/multi/cmd_nav', 10)
        self._timer = rosNode.create_timer(0.5, self.timer_callback)

    def timer_callback(self):
        global bumper_type 
        global bumper_state
        global i
        velocity = Twist()
        print("avance : " + str(bumper_type) + ";" + str(bumper_state))

        if(i>2):
            valeur_x=0.2
            valeur_z=0.0
        else:
            if(bumper_state==1 and bumper_type==1): 
                valeur_x=0.0
                valeur_z=-1.0
            else: 
                valeur_x=0.0
                valeur_z=1.0
        
        i+=1
        velocity.linear.x = valeur_x
        velocity.angular.z = valeur_z

        self._publisher.publish(velocity)

class ROSListener: 
    def __init__(self, rosNode): 
        self._logger = rosNode.get_logger()
        self._subscription=rosNode.create_subscription(BumperEvent, '/events/bumper', self.listener_callback, 10)
    
    def listener_callback(self, msg):
        global bumper_type 
        global bumper_state
        global i
        if ((msg.state==1) & (msg.bumper==1)):
            bumper_type=1
            bumper_state=1
            i=0
            print(" : " + str(bumper_type) + ";" + str(bumper_state))
        if msg.state==1 & msg.bumper==0:
            bumper_type=2
            bumper_state=1
            i=0
            print(" : " + str(bumper_type) + ";" + str(bumper_state))

if __name__ == "__main__":
    squaredMov()